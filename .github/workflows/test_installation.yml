name: Test Installation and Basic Functionality

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: Run installation script
        run: python install.py
      
      - name: Generate test audio file
        run: |
          # Create test directory
          mkdir -p test_resources
          # Generate a synthetic audio file for testing (1 second of silence)
          ffmpeg -f lavfi -i anullsrc=r=44100:cl=stereo -t 1 -c:a pcm_s16le -y test_resources/sample.wav
      
      - name: Test direct processing
        run: |
          mkdir -p output
          # Create a simple processor script for testing
          cat > test.py << 'EOF'
          import sys
          import os
          from tools.processor.spleeter_processor import extract_stems
          
          if __name__ == "__main__":
              # Process using sample audio
              extract_stems("test_resources/sample.wav", "output", stem_number=2)
          EOF
          
          # Run the script
          python test.py
          
          # Verify stems exist
          find output -name "vocals.wav" | grep .
          find output -name "accompaniment.wav" | grep .

  test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      
      - name: Install FFmpeg
        run: |
          brew install ffmpeg
      
      - name: Run installation script
        run: python install.py
      
      - name: Generate test audio file
        run: |
          # Create test directory
          mkdir -p test_resources
          # Generate a synthetic audio file for testing (1 second of silence)
          ffmpeg -f lavfi -i anullsrc=r=44100:cl=stereo -t 1 -c:a pcm_s16le -y test_resources/sample.wav
      
      - name: Test direct processing
        run: |
          mkdir -p output
          # Create a simple processor script for testing
          cat > test.py << 'EOF'
          import sys
          import os
          from tools.processor.spleeter_processor import extract_stems
          
          if __name__ == "__main__":
              # Process using sample audio
              extract_stems("test_resources/sample.wav", "output", stem_number=2)
          EOF
          
          # Run the script
          python test.py
          
          # Verify stems exist
          find output -name "vocals.wav" | grep .
          find output -name "accompaniment.wav" | grep .

  test-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      
      - name: Install FFmpeg
        # Using Chocolatey to install FFmpeg on Windows
        run: |
          choco install ffmpeg -y
          # Add to PATH for this session
          echo "$env:ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      - name: Run installation script
        run: python install.py
      
      - name: Generate test audio file
        run: |
          # Create test directory
          mkdir -p test_resources
          # Generate a synthetic audio file for testing (1 second of silence)
          ffmpeg -f lavfi -i anullsrc=r=44100:cl=stereo -t 1 -c:a pcm_s16le -y test_resources/sample.wav
      
      - name: Test direct processing
        run: |
          mkdir -p output
          # Create test script
          @"
          import sys
          import os
          from tools.processor.spleeter_processor import extract_stems
          
          if __name__ == "__main__":
              # Process using sample audio
              extract_stems("test_resources/sample.wav", "output", stem_number=2)
          "@ | Out-File -FilePath test.py -Encoding utf8
          
          # Run the script
          python test.py
          
          # Verify stems exist
          Get-ChildItem -Path "output" -Filter "vocals.wav" -File | Where-Object { $_.Length -gt 0 }
          Get-ChildItem -Path "output" -Filter "accompaniment.wav" -File | Where-Object { $_.Length -gt 0 }

  # Test with custom output directory to avoid permission issues
  test-with-custom-output:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: Run installation script
        run: python install.py
      
      - name: Generate test audio file
        run: |
          # Create test directory
          mkdir -p test_resources
          # Generate a synthetic audio file for testing (1 second of silence)
          ffmpeg -f lavfi -i anullsrc=r=44100:cl=stereo -t 1 -c:a pcm_s16le -y test_resources/sample.wav
      
      - name: Test with custom output directory
        run: |
          # Create output directory
          mkdir -p ./custom_output
          
          # Create a simple processor script for testing with custom output
          cat > test_custom.py << 'EOF'
          import sys
          import os
          from tools.processor.spleeter_processor import extract_stems
          
          if __name__ == "__main__":
              # Process using sample audio with custom output
              extract_stems("test_resources/sample.wav", "./custom_output", stem_number=2)
          EOF
          
          # Run the script
          python test_custom.py
          
          # Verify stems exist in custom output
          find ./custom_output -name "vocals.wav" | grep .
          find ./custom_output -name "accompaniment.wav" | grep .